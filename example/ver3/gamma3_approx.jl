using ElectronLiquid, UniElectronGas
using ElectronGas, LinearAlgebra
using JLD2, DelimitedFiles
using Measurements
using ElectronGas.Parameters

function Γ3W_ansatz(beta, rs, F=-0.2rs, N=16)
    para = Parameter.rydbergUnit(1 / beta, rs, 3)
    Nth = N
    theta = [(i) / (Nth) * π for i in 0:Nth] # N+1 points
    qout = norm.([[para.kF * (1 - cos(θ)), -para.kF * sin(θ), 0.0] for θ in theta])
    Pi0 = [2ElectronGas.Polarization.Polarization0_FiniteTemp(q, 0, para) / para.NF for q in qout]
    println("Pi0=", Pi0)
    Pi = Pi0 ./ (1 .- F .* Pi0)
    println("Pi=", Pi)
    Vc = para.e0^2 / para.ϵ0 * para.NF
    println("Vc=", Vc)
    # W = [Vc / (q[i]^2 - Vc * Pi[i]) for i in 1:length(q)]
    W = Vc ./ (qout .^ 2 .- Vc .* Pi)
    println("W=", W)
    G3 = 1 ./ (1 .- F .* Pi0)
    G3W1 = G3 .* W
    println(G3W1)
    G3W2 = Vc ./ (qout .^ 2 .- (Vc .+ F .* qout .^ 2) .* Pi0)
    println(G3W2)
    return G3W1
end
G3Ws = [Γ3W_ansatz(40, i) for i in 1:5]

function series_inv(s)
    # assume S = 1 + s[1]x + s[2]x^2 + ..., 
    # compute expansion series coef. 1/S = 1 + invS[1]x + invS[2]x^2 + ...
    order = length(s)
    invS = 0.0 .* s
    # first expand 1/S = 1 - (S-1) + (S-1)^2 + ...
    for i in 1:order
        # (S-1)^i terms
        indices = CartesianIndices(tuple((ones(Int, i) .* order)...))
        for iidx in 1:length(indices)
            idx = indices[iidx]
            totalorder = sum([idx[k] for k in 1:i])
            if totalorder <= order # collect up to the order of s
                result = prod([s[idx[k]] for k in 1:i])
                invS[totalorder] += result * (-1)^i
            end
        end
    end
    return invS
end

function f2invf(dF)
    # # convert expansion of F to expansion of 1/(1+F)
    # # expand as 1/(1+F) = 1-F+F^2+... then resum
    # order = length(dF)
    # dinvf = 0.0 .* F
    # for i in 1:order
    #     # F^i term
    #     indices = CartesianIndices(tuple((ones(Int, i) .* order)...))
    #     for iidx in 1:length(indices)
    #         idx = indices[iidx]
    #         totalorder = sum([idx[k] for k in 1:i])
    #         if totalorder <= order
    #             result = prod([dF[idx[k]] for k in 1:i])
    #             dinvf[totalorder] += result * (-1)^i
    #         end
    #     end
    # end
    # return dinvf
    return series_inv(dF)
end

function series_multiply(a, b)
    # assume A = 1 + a[1]x + ..., B= 1 + b[1]x ...
    # compute AB = 1 + ab[1]x + ...
    order = minimum([length(a), length(b)]) # result follows the lower order
    ab = zeros(typeof(a[1]), order)
    for i in 1:order
        ab[i] += a[i] + b[i]
        for j in 1:i-1
            ab[i] += a[j] * b[i-j]
        end
    end
    return ab
end

order2accum(s) = [sum(s[1:i]) for i in 1:length(s)]

function zinvf(dzinv, dfinv)
    # dzfinv = 0 .* dzinv
    # for i in 1:length(dzinv)
    #     # order i
    #     dzfinv[i] += dzinv[i] + dfinv[i]
    #     for j in 1:i-1
    #         dzfinv[i] += dzinv[j] * dfinv[i-j]
    #     end
    # end
    # return [sum(dzfinv[1:i]) for i in 1:length(dzfinv)]
    return order2accum(series_multiply(dzinv, dfinv))
end

function proper2improper(para, g3, Π0, f, q)
    @unpack e0s, ϵ0 = para
    Π = Π0 ./ (1 .- f .* Π0)
    Vc = (e0s^2 / ϵ0) * para.NF
    W = Vc ./ (q .^ 2 .- Vc .* Π)
    # return (1 .+ Π .* W) .* g3
    return (W) .* g3
end

order = 5

rs = 1.0
beta = 40.0
lam = 5.0
F = [-0.111259 ± 7.8e-5 -0.05381 ± 4.2e-5 -0.024548 ± 2.9e-5 -0.011308 ± 2.8e-5 -0.005198 ± 3.7e-5]
F_conv = -0.2102 ± 0.0004
dz = [-0.0 ± 8.1e-11, -0.010642 ± 1.8e-5, -0.012171 ± 2.7e-5, -0.011715 ± 3.8e-5, -0.010314 ± 6.2e-5]
dzinv = [0.0 ± 8.1e-11, 0.010642 ± 1.8e-5, 0.012171 ± 2.7e-5, 0.011828 ± 3.8e-5, 0.010573 ± 6.2e-5]
dm = [0.975322 ± 2.7e-5 -0.01427 ± 2.0e-5 -0.007442 ± 1.8e-5 -0.003123 ± 1.9e-5 -0.000908 ± 2.5e-5]
data = -[
    1.0 40.0 5.0 5 1 -0.11477±0.00022 -0.19545±0.00029 -0.24733±0.00043 -0.28235±0.00079 -0.3065±0.0016
    1.0 40.0 5.0 5 2 -0.11495±0.00022 -0.19559±0.00027 -0.24715±0.00035 -0.28083±0.00053 -0.30321±0.00093
    1.0 40.0 5.0 5 3 -0.11463±0.00023 -0.19517±0.00028 -0.24689±0.00034 -0.28105±0.00047 -0.30426±0.00077
    1.0 40.0 5.0 5 4 -0.11476±0.00025 -0.19543±0.00029 -0.24736±0.00034 -0.2815±0.00045 -0.30467±0.00071
    1.0 40.0 5.0 5 5 -0.11439±0.00025 -0.19528±0.0003 -0.24723±0.00034 -0.28132±0.00044 -0.30406±0.00068
    1.0 40.0 5.0 5 6 -0.11392±0.00026 -0.19456±0.0003 -0.24664±0.00034 -0.28079±0.00043 -0.30285±0.00066
    1.0 40.0 5.0 5 7 -0.11328±0.00026 -0.19464±0.00031 -0.24697±0.00035 -0.28178±0.00043 -0.30489±0.00064
    1.0 40.0 5.0 5 8 -0.11181±0.00026 -0.19371±0.00031 -0.24642±0.00035 -0.28156±0.00043 -0.30555±0.00063
    1.0 40.0 5.0 5 9 -0.11092±0.00026 -0.19289±0.00031 -0.2462±0.00035 -0.28192±0.00043 -0.30637±0.00063
    1.0 40.0 5.0 5 10 -0.10883±0.00027 -0.19128±0.00031 -0.24501±0.00035 -0.28105±0.00043 -0.30532±0.00062
    1.0 40.0 5.0 5 11 -0.10608±0.00026 -0.18868±0.00031 -0.24322±0.00034 -0.27998±0.00042 -0.30509±0.00062
    1.0 40.0 5.0 5 12 -0.10242±0.00026 -0.18511±0.0003 -0.24012±0.00034 -0.27745±0.00042 -0.30383±0.00061
    1.0 40.0 5.0 5 13 -0.09811±0.00025 -0.18047±0.0003 -0.23654±0.00033 -0.2752±0.00041 -0.30305±0.0006
    1.0 40.0 5.0 5 14 -0.09287±0.00025 -0.17548±0.00029 -0.23343±0.00033 -0.27482±0.0004 -0.30554±0.00059
    1.0 40.0 5.0 5 15 -0.0868±0.00024 -0.16908±0.00029 -0.22811±0.00032 -0.26939±0.00039 -0.29591±0.00056
    1.0 40.0 5.0 5 16 -0.08174±0.00025 -0.16255±0.00029 -0.21811±0.00032 -0.25263±0.00039 -0.27109±0.00055
    1.0 40.0 5.0 5 17 -0.08009±0.00025 -0.15974±0.0003 -0.21345±0.00033 -0.24564±0.00039 -0.26272±0.00055
]
# lam = 3.5
# F = [-0.132246 ± 9.4e-5 -0.051096 ± 4.9e-5 -0.017924 ± 3.9e-5 -0.006103 ± 4.8e-5 -0.002216 ± 8.2e-5]
# F_conv = -0.2102 ± 0.0004
# dz = [-0.0 ± 8.1e-11, -0.017664 ± 2.9e-5, -0.01745 ± 4.6e-5, -0.014469 ± 7.6e-5, -0.01098 ± 0.00015]
# dzinv = [0.0 ± 8.1e-11, 0.017664 ± 2.9e-5, 0.01745 ± 4.6e-5, 0.014781 ± 7.6e-5, 0.01159 ± 0.00015]
# dm = [1 - 0.965154 ± 3.5e-5, -0.012734 ± 2.6e-5, -0.003684 ± 2.6e-5, -1.7e-5 ± 3.3e-5, 0.000808 ± 5.4e-5]
# data = -[
#     1.0 40.0 3.5 5 1 -0.14135±0.00036 -0.23377±0.00051 -0.2869±0.00094 -0.3181±0.0021 -0.3296±0.0054
#     1.0 40.0 3.5 5 2 -0.14114±0.0005 -0.23321±0.00059 -0.28656±0.00071 -0.3172±0.001 -0.3367±0.002
#     1.0 40.0 3.5 5 3 -0.13966±0.00051 -0.2347±0.00061 -0.29009±0.0007 -0.32288±0.00098 -0.3416±0.0018
#     1.0 40.0 3.5 5 4 -0.12756±0.00049 -0.22633±0.00059 -0.28753±0.00069 -0.32747±0.00096 -0.3548±0.0018
#     1.0 40.0 3.5 5 5 -0.10448±0.00046 -0.20734±0.00055 -0.27013±0.00064 -0.29808±0.00088 -0.3013±0.0016
# ]
# lam = 2.0
# F = [-0.054886 ± 5.2e-5 0.000522 ± 4.4e-5 0.00332 ± 5.7e-5 0.00188 ± 0.0001 0.00047 ± 0.00024]
# F_conv = -0.2102 ± 0.0004
# dz = [-0.0 ± 8.1e-11, -0.037652 ± 6.3e-5, -0.02299 ± 0.00011, -0.01325 ± 0.00024, -0.00681 ± 0.0006]
# dzinv = [0.0 ± 8.1e-11, 0.037652 ± 6.3e-5, 0.02299 ± 0.00011, 0.01466 ± 0.00024, 0.00854 ± 0.0006]
# dm = [1 - 0.945114 ± 4.9e-5 0.000522 ± 4.2e-5 0.00332 ± 5.4e-5 0.001879 ± 9.7e-5 0.00047 ± 0.00022]
# data = -[
#     1.0 40.0 2.0 5 1 -0.18186±0.0005 -0.2853±0.0008 -0.3331±0.0019 -0.3541±0.0056 -0.341±0.018
#     1.0 40.0 2.0 5 2 -0.18373±0.00068 -0.28741±0.00085 -0.3357±0.0012 -0.3634±0.0025 -0.3761±0.0064
#     1.0 40.0 2.0 5 3 -0.18711±0.00073 -0.29328±0.00088 -0.3435±0.0012 -0.3702±0.0022 -0.3899±0.0057
#     1.0 40.0 2.0 5 4 -0.18011±0.00071 -0.29567±0.00086 -0.3595±0.0012 -0.3979±0.0023 -0.427±0.0058
#     1.0 40.0 2.0 5 5 -0.15141±0.00068 -0.29308±0.00083 -0.3679±0.0011 -0.369±0.0021 -0.3308±0.0052
# ]

# rs = 2.0
# beta = 40.0
# lam = 2.0
# F = [-0.16862 ± 0.00014 -0.099389 ± 9.5e-5 -0.051536 ± 7.8e-5 -0.026726 ± 9.9e-5 -0.01354 ± 0.0002]
# F_conv = sum([-0.24105 ± 0.00021 -0.08902 ± 0.00015 -0.02963 ± 0.00018 -0.00965 ± 0.00042 -0.0013 ± 0.0014])
# dz = [-0.0 ± 3.3e-10, -0.021397 ± 3.6e-5, -0.022914 ± 6.5e-5, -0.02301 ± 0.00013, -0.02119 ± 0.00031]
# dzinv = [0.0 ± 3.3e-10, 0.021397 ± 3.6e-5, 0.022914 ± 6.5e-5, 0.02347 ± 0.00013, 0.02217 ± 0.00031]
# dm = [1 - 0.971212 ± 3.6e-5 -0.013191 ± 3.4e-5 -0.006643 ± 3.8e-5 -0.00133 ± 5.3e-5 0.00119 ± 0.0001]
# data = -[
#     2.0 40.0 2.0 5 1 -0.17428±0.00033 -0.33183±0.00051 -0.4518±0.0011 -0.5431±0.0032 -0.6035±0.0097
#     2.0 40.0 2.0 5 2 -0.17425±0.00032 -0.33322±0.00046 -0.45269±0.00081 -0.5413±0.0019 -0.6118±0.0049
#     2.0 40.0 2.0 5 3 -0.17415±0.00035 -0.33244±0.00047 -0.45091±0.00073 -0.5389±0.0015 -0.6043±0.0039
#     2.0 40.0 2.0 5 4 -0.17318±0.00036 -0.33068±0.00047 -0.44849±0.00069 -0.5352±0.0014 -0.5976±0.0035
#     2.0 40.0 2.0 5 5 -0.17131±0.00037 -0.32813±0.00048 -0.44632±0.00068 -0.535±0.0013 -0.6006±0.0033
#     2.0 40.0 2.0 5 6 -0.17023±0.00038 -0.32678±0.00048 -0.44284±0.00066 -0.529±0.0013 -0.5906±0.0031
#     2.0 40.0 2.0 5 7 -0.16837±0.00039 -0.32434±0.00049 -0.44082±0.00066 -0.5243±0.0012 -0.5853±0.003
#     2.0 40.0 2.0 5 8 -0.16613±0.00038 -0.32057±0.00049 -0.43564±0.00065 -0.521±0.0012 -0.5845±0.0029
#     2.0 40.0 2.0 5 9 -0.16217±0.00039 -0.31526±0.00049 -0.42942±0.00065 -0.5137±0.0012 -0.5769±0.0029
#     2.0 40.0 2.0 5 10 -0.15817±0.00038 -0.31009±0.00048 -0.42398±0.00064 -0.5094±0.0012 -0.5731±0.0028
#     2.0 40.0 2.0 5 11 -0.15294±0.00038 -0.30281±0.00047 -0.41514±0.00063 -0.4983±0.0011 -0.5602±0.0028
#     2.0 40.0 2.0 5 12 -0.14575±0.00037 -0.29433±0.00047 -0.40628±0.00062 -0.4887±0.0011 -0.5545±0.0027
#     2.0 40.0 2.0 5 13 -0.139±0.00036 -0.28505±0.00045 -0.39803±0.0006 -0.4849±0.0011 -0.5506±0.0027
#     2.0 40.0 2.0 5 14 -0.1305±0.00035 -0.27579±0.00045 -0.39128±0.00059 -0.4854±0.0011 -0.5648±0.0026
#     2.0 40.0 2.0 5 15 -0.12217±0.00035 -0.26686±0.00044 -0.38564±0.00057 -0.4771±0.001 -0.5299±0.0024
#     2.0 40.0 2.0 5 16 -0.1157±0.00035 -0.25852±0.00044 -0.36868±0.00057 -0.43464±0.00098 -0.4438±0.0023
#     2.0 40.0 2.0 5 17 -0.11261±0.00036 -0.2536±0.00045 -0.35841±0.00058 -0.41682±0.00099 -0.4277±0.0023
# ]
# lam = 1.5
# F = [-0.19758 ± 0.00016 -0.09972 ± 0.00011 -0.04378 ± 0.0001 -0.01851 ± 0.00017 -0.00738 ± 0.00045]
# F_conv = sum([-0.24105 ± 0.00021 -0.08902 ± 0.00015 -0.02963 ± 0.00018 -0.00965 ± 0.00042 -0.0013 ± 0.0014])
# dz = [-0.0 ± 3.3e-10, -0.032631 ± 5.4e-5, -0.03091 ± 0.00011, -0.02673 ± 0.00024, -0.0202 ± 0.0007]
# dzinv = [0.0 ± 3.3e-10, 0.032631 ± 5.4e-5, 0.03091 ± 0.00011, 0.0278 ± 0.00024, 0.02222 ± 0.0007]
# dm = [1 - 0.960201 ± 4.6e-5 -0.010301 ± 4.4e-5 -0.002222 ± 5.5e-5 0.002739 ± 9.4e-5 0.00401 ± 0.00023]
# data = -[
#     2.0 40.0 1.5 5 1 -0.20731±0.0004 -0.38969±0.00067 -0.5191±0.0018 -0.6131±0.006 -0.718±0.021
#     2.0 40.0 1.5 5 2 -0.20638±0.0004 -0.38849±0.0006 -0.5175±0.0013 -0.6057±0.0035 -0.655±0.011
#     2.0 40.0 1.5 5 3 -0.20706±0.00042 -0.38953±0.0006 -0.5179±0.0011 -0.6082±0.0028 -0.667±0.0085
#     2.0 40.0 1.5 5 4 -0.20652±0.00044 -0.38853±0.0006 -0.5153±0.001 -0.6066±0.0026 -0.6681±0.0076
#     2.0 40.0 1.5 5 5 -0.20476±0.00045 -0.3854±0.0006 -0.51097±0.00098 -0.5952±0.0024 -0.6519±0.0071
#     2.0 40.0 1.5 5 6 -0.20446±0.00046 -0.38504±0.00061 -0.50977±0.00096 -0.5946±0.0023 -0.6447±0.0067
#     2.0 40.0 1.5 5 7 -0.20344±0.00047 -0.38331±0.00061 -0.5077±0.00095 -0.5915±0.0022 -0.645±0.0065
#     2.0 40.0 1.5 5 8 -0.20017±0.00047 -0.37855±0.00061 -0.50283±0.00093 -0.5858±0.0021 -0.6324±0.0063
#     2.0 40.0 1.5 5 9 -0.19617±0.00047 -0.374±0.00061 -0.49698±0.00092 -0.5836±0.0021 -0.6411±0.0062
#     2.0 40.0 1.5 5 10 -0.19256±0.00047 -0.36921±0.00061 -0.4916±0.00091 -0.5784±0.0021 -0.6336±0.0061
#     2.0 40.0 1.5 5 11 -0.18708±0.00046 -0.36354±0.0006 -0.48648±0.0009 -0.5698±0.0021 -0.6203±0.0061
#     2.0 40.0 1.5 5 12 -0.18112±0.00045 -0.35674±0.00059 -0.48139±0.00089 -0.5707±0.002 -0.6383±0.0059
#     2.0 40.0 1.5 5 13 -0.17206±0.00044 -0.34714±0.00057 -0.47444±0.00087 -0.5688±0.002 -0.6451±0.0058
#     2.0 40.0 1.5 5 14 -0.16249±0.00043 -0.3399±0.00056 -0.47638±0.00084 -0.5904±0.0019 -0.6872±0.0056
#     2.0 40.0 1.5 5 15 -0.15092±0.00043 -0.3313±0.00055 -0.47611±0.00081 -0.5822±0.0018 -0.62±0.0053
#     2.0 40.0 1.5 5 16 -0.14316±0.00043 -0.32294±0.00055 -0.45634±0.0008 -0.5125±0.0017 -0.4655±0.005
#     2.0 40.0 1.5 5 17 -0.14077±0.00044 -0.3181±0.00057 -0.44269±0.00081 -0.4835±0.0018 -0.4475±0.005
# ]
# lam = 1.0
# F = [-0.24105 ± 0.00021 -0.08902 ± 0.00015 -0.02963 ± 0.00018 -0.00965 ± 0.00042 -0.0013 ± 0.0014]
# F_conv = sum([-0.24105 ± 0.00021 -0.08902 ± 0.00015 -0.02963 ± 0.00018 -0.00965 ± 0.00042 -0.0013 ± 0.0014])
# dz = [-0.0 ± 3.3e-10, -0.058574 ± 9.7e-5, -0.04029 ± 0.00022, -0.02752 ± 0.00064, -0.0169 ± 0.0023]
# dzinv = [0.0 ± 3.3e-10, 0.058574 ± 9.7e-5, 0.04029 ± 0.00022, 0.03095 ± 0.00064, 0.0217 ± 0.0023]
# dm = [1 -0.94035 ± 6.2e-5 0.003359 ± 6.8e-5 0.00586 ± 0.0001 0.00608 ± 0.00024 0.00261 ± 0.00078]
# data = -[
#     2.0 40.0 1.0 5 1 -0.26336±0.00069 -0.4824±0.0014 -0.6268±0.005 -0.723±0.021 -0.739±0.094
#     2.0 40.0 1.0 5 2 -0.26378±0.00092 -0.4799±0.0013 -0.6119±0.0026 -0.6788±0.0081 -0.721±0.03
#     2.0 40.0 1.0 5 3 -0.2596±0.00098 -0.4744±0.0013 -0.6075±0.0023 -0.6924±0.007 -0.742±0.026
#     2.0 40.0 1.0 5 4 -0.23308±0.00093 -0.4534±0.0012 -0.6044±0.0022 -0.7281±0.0068 -0.835±0.026
#     2.0 40.0 1.0 5 5 -0.19152±0.00088 -0.4382±0.0012 -0.5948±0.002 -0.5647±0.006 -0.341±0.022
# ]
# lam = 2.5
# F = [-0.14713 ± 0.00012 -0.095683 ± 8.3e-5 -0.055299 ± 6.4e-5 -0.032226 ± 6.8e-5 -0.01855 ± 0.00011]
# F_conv = sum([-0.24105 ± 0.00021 -0.08902 ± 0.00015 -0.02963 ± 0.00018 -0.00965 ± 0.00042 -0.0013 ± 0.0014])
# dz = [-0.0 ± 3.3e-10, -0.015279 ± 2.5e-5, -0.017587 ± 4.4e-5, -0.018553 ± 7.6e-5, -0.01777 ± 0.00016]
# dzinv = [0.0 ± 3.3e-10, 0.015279 ± 2.5e-5, 0.017587 ± 4.4e-5, 0.018786 ± 7.6e-5, 0.01831 ± 0.00016]
# dm = [1.0 - 0.97811 ± 3.1e-5 -0.013121 ± 2.8e-5 -0.008559 ± 2.9e-5 -0.004017 ± 3.6e-5 -0.00108 ± 5.8e-5]
# data = -[
#     2.0 40.0 2.5 5 1 -0.15129±0.00028 -0.29154±0.00041 -0.40117±0.00078 -0.4874±0.0019 -0.5606±0.0052
#     2.0 40.0 2.5 5 2 -0.1512±0.00028 -0.29193±0.00038 -0.40257±0.00058 -0.4891±0.0012 -0.5579±0.0027
#     2.0 40.0 2.5 5 3 -0.1506±0.00029 -0.29094±0.00039 -0.40022±0.00054 -0.48549±0.00098 -0.5502±0.0022
#     2.0 40.0 2.5 5 4 -0.14979±0.00031 -0.28901±0.00039 -0.39794±0.00052 -0.48263±0.0009 -0.5482±0.0019
#     2.0 40.0 2.5 5 5 -0.14804±0.00032 -0.28731±0.0004 -0.3957±0.00052 -0.48059±0.00085 -0.5467±0.0018
#     2.0 40.0 2.5 5 6 -0.1466±0.00033 -0.2847±0.00041 -0.3925±0.00051 -0.4759±0.00082 -0.5407±0.0017
#     2.0 40.0 2.5 5 7 -0.14504±0.00033 -0.28251±0.00041 -0.38994±0.00051 -0.47309±0.0008 -0.5386±0.0017
#     2.0 40.0 2.5 5 8 -0.14256±0.00033 -0.27892±0.00041 -0.38554±0.00051 -0.46884±0.00079 -0.5326±0.0016
#     2.0 40.0 2.5 5 9 -0.13906±0.00033 -0.27354±0.00041 -0.37888±0.0005 -0.45958±0.00077 -0.5215±0.0016
#     2.0 40.0 2.5 5 10 -0.13518±0.00032 -0.26761±0.0004 -0.37193±0.0005 -0.45273±0.00076 -0.5132±0.0016
#     2.0 40.0 2.5 5 11 -0.12948±0.00032 -0.26006±0.0004 -0.36292±0.00049 -0.44302±0.00075 -0.5038±0.0015
#     2.0 40.0 2.5 5 12 -0.12418±0.00031 -0.25198±0.00039 -0.35355±0.00048 -0.43241±0.00074 -0.493±0.0015
#     2.0 40.0 2.5 5 13 -0.11713±0.00031 -0.24258±0.00038 -0.34352±0.00047 -0.42326±0.00072 -0.4888±0.0015
#     2.0 40.0 2.5 5 14 -0.10969±0.0003 -0.2329±0.00037 -0.33456±0.00046 -0.41923±0.00069 -0.4899±0.0014
#     2.0 40.0 2.5 5 15 -0.10272±0.00029 -0.22416±0.00037 -0.32522±0.00045 -0.40589±0.00067 -0.4627±0.0013
#     2.0 40.0 2.5 5 16 -0.09686±0.0003 -0.21559±0.00037 -0.31094±0.00044 -0.37682±0.00066 -0.4124±0.0013
#     2.0 40.0 2.5 5 17 -0.09481±0.00031 -0.21208±0.00038 -0.30369±0.00046 -0.36456±0.00067 -0.3944±0.0013
# ]

# # rs5lam1.0
# rs = 5.0
# lam = 1.0
# F = [-0.1895 ± 0.00016 -0.17743 ± 0.00014 -0.13061 ± 0.00014 -0.09931 ± 0.00018 -0.07573 ± 0.00038]
# # beta = 25.0
# # dzinv = [0.0 ± 1.3e-9, 0.021954 ± 3.4e-5, 0.022269 ± 6.5e-5, 0.02696 ± 0.00012, 0.02859 ± 0.00026]
# beta = 40.0
# dzinv = [0.0 ± 2.0e-9, 0.022192 ± 4.0e-5, 0.022399 ± 8.6e-5, 0.02713 ± 0.00019, 0.02849 ± 0.00055]
# # beta = 50.0
# # dzinv = [0.0 ± 2.5e-9, 0.022086 ± 4.2e-5, 0.022347 ± 9.8e-5, 0.02707 ± 0.00024, 0.02818 ± 0.00076]
# data = -[
#     5.0 40.0 1.0 4 1 -0.19888±0.00057 -0.45497±0.00088 -0.7099±0.002 -0.9696±0.0068
#     5.0 40.0 1.0 4 2 -0.19342±0.00075 -0.4437±0.001 -0.6857±0.0014 -0.9237±0.0027
#     5.0 40.0 1.0 4 3 -0.17374±0.00074 -0.4054±0.001 -0.625±0.0014 -0.8359±0.0024
#     5.0 40.0 1.0 4 4 -0.14019±0.00066 -0.34113±0.00093 -0.5314±0.0012 -0.711±0.0022
#     5.0 40.0 1.0 4 5 -0.11362±0.00064 -0.29669±0.00091 -0.4649±0.0012 -0.596±0.0021
# ]

para = Parameter.rydbergUnit(1 / beta, rs, 3)
println(para)
Nth = 16
theta = [(i) / (Nth) * π for i in 0:Nth] # N+1 points
qout = [[para.kF * (1 - cos(θ)), -para.kF * sin(θ), 0.0] for θ in theta]
# Pi = [2ElectronGas.Polarization.Polarization0_3dZeroTemp(norm(q), 0, para) / para.NF for q in qout]
Pi = [2ElectronGas.Polarization.Polarization0_FiniteTemp(norm(q), 0, para) / para.NF for q in qout]

# dfinv = f2invf_naive(-F)
dfinv = f2invf(F)
# println(f2invf_naive(F))
# println("1/(1+F)=", f2invf(F))

zinv = [1 + sum(dzinv[1:i]) for i in 1:length(dzinv)]

# zinv = 1 .- [0.00058 ± 0.00039 -0.0247 ± 0.00073 -0.0529 ± 0.0015 -0.0859 ± 0.0036 -0.09977 ± 0.0003]
# zinv = 1 .- [-8.3e-5 ± 0.00045 -0.01749 ± 0.00081 -0.0365 ± 0.0017 -0.057 ± 0.004 -0.09977 ± 0.0003]
# zinv = 1 .- [0.00061 ± 0.00055 -0.0259 ± 0.0014 -0.0545 ± 0.0048 -0.073 ± 0.019]
# dzinv = 0.0 .* zinv
# dzinv[2:end] .= [zinv[i+1] - zinv[i] for i in 1:length(zinv)-1]

zfinv = zinvf(dzinv[1:end], f2invf(F))
# zfinv = zinvf(dzinv[1:end], f2invf(F))
# zfinv_naive = zinvf(dzinv, f2invf_naive(F))
println("1/z=", zinv)
println("1/(1+F)=", order2accum(f2invf(F)))
println("1/z/(1+F)=", zfinv)
# println("1/z/(1+m*F)=", order2accum(series_multiply(dzinv, series_inv(series_multiply(dm, F) .- dm))))
# println([zinv[i] * (1 + sum(dfinv[1:i])) for i in 1:length(dfinv)] .- 1)
# println(zfinv_naive)

using PyPlot
using LaTeXStrings
cdict = Dict(["blue" => "#0077BB", "cyan" => "#33BBEE", "teal" => "#009988", "orange" => "#EE7733", "red" => "#CC3311", "magenta" => "#EE3377", "grey" => "#BBBBBB"])
style = PyPlot.matplotlib."style"
# style.use(["science", "std-colors"])
style.use(["science"])
# color = [cdict["blue"], cdict["red"], cdict["teal"], cdict["orange"], cdict["cyan"], cdict["magenta"], cdict["grey"], "black"]
color = [cdict["blue"], cdict["red"], cdict["teal"], cdict["orange"], cdict["cyan"], cdict["grey"], "black"]
#cmap = get_cmap("Paired")
rcParams = PyPlot.PyDict(PyPlot.matplotlib."rcParams")
rcParams["font.size"] = 12
rcParams["font.family"] = "Times New Roman"
markers_expanded = ['o', 's', '^', 'D', 'p']

# figure(figsize=(9, 6))
fig, ax1 = subplots(figsize=(6, 4))
xlabel(L"\theta")
ylabel(L"z\Gamma^3")
# ylabel(L"zv_q\Gamma_{full}^3")
xlim(0, π)
# ylim(1, 1.3)
ylim(0, 1.6)

# zfinvs = zeros(Measurement{Float64}, (Nth + 1, order))
# finvs = zeros(Measurement{Float64}, (Nth + 1, order))
zver3s = zeros(Measurement{Float64}, (Nth + 1, order))
wzver3s = zeros(Measurement{Float64}, (Nth + 1, order))

for (i, Π) in enumerate(Pi)
    # println(Π)
    # zfinv = zinvf(dzinv[2:end], f2invf(Π .* F))
    # println(f2invf(Π .* F))
    # println("1/z/(1+ΠF)=", zfinv)
    # zfinvs[i, :] .= zfinv
    df = f2invf(-Π .* F)[1:order]
    dver3 = 0.0 .* df
    dver3[1] = data[i, 6]
    dver3[2:end] .= [data[i, 6+j] - data[i, 5+j] for j in 1:order-1]
    # finvs[i, :] = [sum(df[1:j]) for j in 1:order]
    zver3s[i, :] .= zinvf(dz[1:end], dver3) .+ 1.0
    wzver3s[i, :] .= proper2improper(para, zver3s[i, :], Π, F_conv, norm(qout[i]))
    # println(finvs[i, :])
    println(zver3s[i, :])
    println(wzver3s[i, :])
end


# for o in 1:order
#     errorbar(theta, Measurements.value.(zfinvs[:, o]), yerr=Measurements.uncertainty.(zfinvs[:, o]), fmt="bo-", label="O($o)", fillstyle="none", capsize=3)
#     errorbar(theta, Measurements.value.(data[:, 5+o]), yerr=Measurements.uncertainty.(data[:, 5+o]), fmt="rs:", fillstyle="none", capsize=3)
# end

for o in 1:order
    # errorbar(theta, Measurements.value.(finvs[:, o]), yerr=Measurements.uncertainty.(finvs[:, o]), fmt="bo-", label="O($o)", fillstyle="none", capsize=3)
    errorbar(theta, Measurements.value.(zver3s[:, o]), yerr=Measurements.uncertainty.(zver3s[:, o]), fmt=markers_expanded[o] * ":", color=color[o], label="order $o", fillstyle="none", capsize=3)
end

Ndense = 49
thetadense = [(i) / (Ndense) * π for i in 0:Ndense] # N+1 points
qoutdense = [[para.kF * (1 - cos(θ)), -para.kF * sin(θ), 0.0] for θ in thetadense]
# Pidense = [-2ElectronGas.Polarization.Polarization0_FiniteTemp(norm(q), 0, para) / para.NF for q in qoutdense]
Pidense = [2ElectronGas.Polarization.Polarization0_3dZeroTemp(norm(q), 0, para) / para.NF for q in qoutdense]
finv_final = zeros(Measurement{Float64}, Ndense + 1)
wfinv_final = zeros(Measurement{Float64}, Ndense + 1)
for (i, Π) in enumerate(Pidense)
    finv_final[i] = 1 / (1 - Π * F_conv)
    wfinv_final[i] = proper2improper(para, finv_final[i], Π, F_conv, norm(qoutdense[i]))
end

plot(thetadense, Measurements.value.(finv_final), "k-", label=L"\frac{1}{1-f_{xc}\Pi_0}")

println(finv_final[1], " -> ", finv_final[end])
legend()
savefig("ver3angel_rs$(rs)_lam$(lam).pdf")
# savefig("fullver3angel_rs$(rs)_lam$(lam).pdf")

println(wzver3s[:, 5])
wz2 = [0.9405 ± 0.0065, 0.9334 ± 0.0037, 0.8944 ± 0.003, 0.84 ± 0.0026, 0.7822 ± 0.0022, 0.7154 ± 0.0018, 0.6539 ± 0.0015, 0.6001 ± 0.0013, 0.5505 ± 0.0012, 0.5099 ± 0.001, 0.4735 ± 0.00095, 0.44643 ± 0.00086, 0.42612 ± 0.00081, 0.41672 ± 0.00076, 0.39851 ± 0.00068, 0.37036 ± 0.00065, 0.36464 ± 0.00064]
yerr2 = [0.024779623317033404, 0.02804258702690335, 0.023413318529055385, 0.02012597217121155, 0.020200383114720846, 0.016510140028150683, 0.01477357201538669, 0.014528215631299364, 0.013292840451540267, 0.012499193830576115, 0.011168891356694032, 0.011793780725767103, 0.01130453299687503, 0.014871597618364799, 0.007102434608273081, 0.006268430336215599, 0.005707742944795491]
wanzats2 = Γ3W_ansatz(40, 2.0, -0.3706, Ndense)
wanzats5 = Γ3W_ansatz(40, 5.0, -0.9, Ndense)
fig2, ax2 = subplots(figsize=(6, 4))
xlabel(L"\theta")
# ylabel(L"z\Gamma^3")
ylabel(L"zv_q\Gamma_{full}^3")
xlim(0, π)
# ylim(1, 1.3)
ylim(0, 1.1)
# yerr = sqrt.(Measurements.uncertainty.(wzver3s[:, 5]) .^ 2 + (Measurements.value.(wzver3s[:, 5] - Measurements.value.(wzver3s[:, 4])) .^ 2))
yerr = Measurements.uncertainty.(wzver3s[:, 5]) .+ abs.(Measurements.value.(wzver3s[:, 5] - Measurements.value.(wzver3s[:, 4])))
println(yerr)
# errorbar(theta, Measurements.value.(wzver3s[:, 5]), yerr=yerr, fmt=markers_expanded[5] * "", color=color[5], label="DiagMC", fillstyle="none", capsize=3)
errorbar(theta, Measurements.value.(wzver3s[:, 5]), yerr=yerr, fmt=markers_expanded[1] * "", color="k", label=L"DiagMC $r_s=1$", fillstyle="none", capsize=3)
errorbar(theta, Measurements.value.(wz2), yerr=yerr2, fmt=markers_expanded[2] * "", color="b", label=L"DiagMC $r_s=2$", fillstyle="none", capsize=3)
plot(thetadense, Measurements.value.(wfinv_final), "k-", label=L"ansatz $r_s=1$")
plot(thetadense, Measurements.value.(wanzats2), "b:", label=L"ansatz $r_s=2$")
plot(thetadense, Measurements.value.(wanzats5), "g--", label=L"ansatz $r_s=5$")
text(2.0, 0.7, L"ansatz: $\frac{v_q}{1-(v_q+f_{xc})\Pi_0}$")
legend()
# savefig("fullver3angel_rs$(rs)_lam$(lam).pdf")
savefig("fullver3angel_rs12.pdf")
